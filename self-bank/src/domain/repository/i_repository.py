from typing import Protocol, Optional, List, TypeVar, Generic
from returns.result import Result
# from ..value_objects.dto import (
#     CreateAssetTypeDto, UpdateAssetTypeDto, ResAssetTypeDto,
#     CreateAssetDto, UpdateAssetDto, ResAssetDto,
#     CreateExpenseTypeDto, UpdateExpenseTypeDto, ResExpenseTypeDto,
#     CreateExpenseDto, UpdateExpenseDto, ResExpenseDto,
#     CreateCustomerTypeDto, UpdateCustomerTypeDto, ResCustomerTypeDto,
#     CreateContactDto, UpdateContactDto, ResContactDto,
#     CreateTransactionDto, UpdateTransactionDto, ResTransactionDto,
#     CreateCurrentSheetDto, UpdateCurrentSheetDto, ResCurrentSheetDto,
# )

# class AssetTypeServiceProtocol(Protocol):
#     async def create(self, dto: CreateAssetTypeDto) -> Result[ResAssetTypeDto, Exception]: ...
#     async def get(self, id: int) -> Optional[ResAssetTypeDto]: ...
#     async def update(self, id: int, dto: UpdateAssetTypeDto) -> Result[ResAssetTypeDto, Exception]: ...
#     async def delete(self, id: int) -> Result[bool, Exception]: ...
#     async def list(self) -> List[ResAssetTypeDto]: ...


# class AssetServiceProtocol(Protocol):
#     async def create(self, dto: CreateAssetDto) -> Result[ResAssetDto, Exception]: ...
#     async def get(self, id: int) -> Optional[ResAssetDto]: ...
#     async def update(self, id: int, dto: UpdateAssetDto) -> Result[ResAssetDto, Exception]: ...
#     async def delete(self, id: int) -> Result[bool, Exception]: ...
#     async def list(self) -> List[ResAssetDto]: ...


# class ExpenseTypeServiceProtocol(Protocol):
#     async def create(self, dto: CreateExpenseTypeDto) -> Result[ResExpenseTypeDto, Exception]: ...
#     async def get(self, id: int) -> Optional[ResExpenseTypeDto]: ...
#     async def update(self, id: int, dto: UpdateExpenseTypeDto) -> Result[ResExpenseTypeDto, Exception]: ...
#     async def delete(self, id: int) -> Result[bool, Exception]: ...
#     async def list(self) -> List[ResExpenseTypeDto]: ...


# class ExpenseServiceProtocol(Protocol):
#     async def create(self, dto: CreateExpenseDto) -> Result[ResExpenseDto, Exception]: ...
#     async def get(self, id: int) -> Optional[ResExpenseDto]: ...
#     async def update(self, id: int, dto: UpdateExpenseDto) -> Result[ResExpenseDto, Exception]: ...
#     async def delete(self, id: int) -> Result[bool, Exception]: ...
#     async def list(self) -> List[ResExpenseDto]: ...


# class CustomerTypeServiceProtocol(Protocol):
#     async def create(self, dto: CreateCustomerTypeDto) -> Result[ResCustomerTypeDto, Exception]: ...
#     async def get(self, id: int) -> Optional[ResCustomerTypeDto]: ...
#     async def update(self, id: int, dto: UpdateCustomerTypeDto) -> Result[ResCustomerTypeDto, Exception]: ...
#     async def delete(self, id: int) -> Result[bool, Exception]: ...
#     async def list(self) -> List[ResCustomerTypeDto]: ...


# class ContactServiceProtocol(Protocol):
#     async def create(self, dto: CreateContactDto) -> Result[ResContactDto, Exception]: ...
#     async def get(self, id: int) -> Optional[ResContactDto]: ...
#     async def update(self, id: int, dto: UpdateContactDto) -> Result[ResContactDto, Exception]: ...
#     async def delete(self, id: int) -> Result[bool, Exception]: ...
#     async def list(self) -> List[ResContactDto]: ...


# class TransactionServiceProtocol(Protocol):
#     async def create(self, dto: CreateTransactionDto) -> Result[ResTransactionDto, Exception]: ...
#     async def get(self, id: int) -> Optional[ResTransactionDto]: ...
#     async def update(self, id: int, dto: UpdateTransactionDto) -> Result[ResTransactionDto, Exception]: ...
#     async def delete(self, id: int) -> Result[bool, Exception]: ...
#     async def list(self) -> List[ResTransactionDto]: ...


# class CurrentSheetServiceProtocol(Protocol):
#     async def create(self, dto: CreateCurrentSheetDto) -> Result[ResCurrentSheetDto, Exception]: ...
#     async def get(self, id: int) -> Optional[ResCurrentSheetDto]: ...
#     async def update(self, id: int, dto: UpdateCurrentSheetDto) -> Result[ResCurrentSheetDto, Exception]: ...
#     async def delete(self, id: int) -> Result[bool, Exception]: ...
#     async def list(self) -> List[ResCurrentSheetDto]: ...



TCreate = TypeVar("TCreate", contravariant=True)
TUpdate = TypeVar("TUpdate", contravariant=True)
TResponse = TypeVar("TResponse")

class CrudProtocol(Protocol, Generic[TCreate, TUpdate, TResponse]):
    async def create(self, dto: TCreate) -> Result[TResponse, Exception]: ...
    async def get(self, id: int) -> Optional[TResponse]: ...
    async def update(self, id: int, dto: TUpdate) -> Result[TResponse, Exception]: ...
    async def delete(self, id: int) -> Result[bool, Exception]: ...
    async def list(self) -> List[TResponse]: ...